name: Run pytest & Build Image

# Configures this workflow to run every time a PR is opened, synchronized or reopened to the branch called 'dev' and on every push to the branch 'main' or to when a release is done.
on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: ['dev']
  push:
    branches: ['main']
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  REGISTRY_USER: ${{ github.actor }}
  REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test-and-lint:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ["3.11", "3.12", "3.13"]
        os: [ubuntu-latest, macos-latest]
    steps:
    - uses: actions/checkout@v4
    - name: Set up PDM
      uses: pdm-project/setup-pdm@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        pdm sync -d -G testing
    - name: Run Tests
      run: |
        pdm run -v pytest tests

    - name: Lint with flake8
      run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
            # exit-zero treats all errors as warnings. The GitHub editor is
            # 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 \
          --max-line-length=127 --statistics

  build:
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    needs: test-and-lint
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    name: Build image
    steps:
    - uses: actions/checkout@v4
    - name: Buildah Action
      uses: redhat-actions/buildah-build@v2
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: ${{ steps.meta.outputs.tags }}
        containerfiles: ./Containerfile
        archs: amd64,arm64
    - name: Push to repo
      uses: redhat-actions/push-to-registry@v2
      with:
        username: ${{ env.REGISTRY_USER }}
        password: ${{ env.REGISTRY_PASSWORD }}
        registry: ${{ env.REGISTRY }}
        image: ${{ env.IMAGE_NAME }}
        tags: ${{ steps.meta.outputs.tags }}
