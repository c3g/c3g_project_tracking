"""Major changes

Revision ID: d1dc98f61aee
Revises: 
Create Date: 2024-07-29 11:42:19.723940

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from alembic_postgresql_enum import TableReference
from alembic_utils.pg_function import PGFunction
from sqlalchemy import text as sql_text
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'd1dc98f61aee'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum('VALID', 'ON_HOLD', 'INVALID', name='stateenum').create(op.get_bind())
    op.create_table('reference',
        sa.Column('name', sa.String(), nullable=True),
        sa.Column('alias', sa.String(), nullable=True),
        sa.Column('assembly', sa.String(), nullable=True),
        sa.Column('version', sa.String(), nullable=True),
        sa.Column('taxon_id', sa.String(), nullable=True),
        sa.Column('source', sa.String(), nullable=True),
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('deprecated', sa.Boolean(), nullable=False),
        sa.Column('deleted', sa.Boolean(), nullable=False),
        sa.Column('creation', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
        sa.Column('modification', sa.DateTime(timezone=True), nullable=True),
        sa.Column('extra_metadata', sa.JSON(), nullable=True),
        sa.Column('ext_id', sa.Integer(), nullable=True),
        sa.Column('ext_src', sa.String(), nullable=True),
        sa.PrimaryKeyConstraint('id')
    )
    # Rename table patient to specimen
    op.rename_table('patient', 'specimen')
    op.add_column('specimen', sa.Column('ext_id', sa.Integer(), nullable=True))
    op.add_column('specimen', sa.Column('ext_src', sa.String(), nullable=True))
    op.add_column('experiment', sa.Column('ext_id', sa.Integer(), nullable=True))
    op.add_column('experiment', sa.Column('ext_src', sa.String(), nullable=True))
    op.add_column('file', sa.Column('ext_id', sa.Integer(), nullable=True))
    op.add_column('file', sa.Column('ext_src', sa.String(), nullable=True))
    op.add_column('job', sa.Column('ext_id', sa.Integer(), nullable=True))
    op.add_column('job', sa.Column('ext_src', sa.String(), nullable=True))
    op.add_column('location', sa.Column('ext_id', sa.Integer(), nullable=True))
    op.add_column('location', sa.Column('ext_src', sa.String(), nullable=True))
    op.add_column('metric', sa.Column('ext_id', sa.Integer(), nullable=True))
    op.add_column('metric', sa.Column('ext_src', sa.String(), nullable=True))
    op.add_column('operation', sa.Column('reference_id', sa.Integer(), nullable=True))
    op.add_column('operation', sa.Column('ext_id', sa.Integer(), nullable=True))
    op.add_column('operation', sa.Column('ext_src', sa.String(), nullable=True))
    op.create_foreign_key(None, 'operation', 'reference', ['reference_id'], ['id'])
    op.add_column('operation_config', sa.Column('ext_id', sa.Integer(), nullable=True))
    op.add_column('operation_config', sa.Column('ext_src', sa.String(), nullable=True))
    op.add_column('project', sa.Column('ext_id', sa.Integer(), nullable=True))
    op.add_column('project', sa.Column('ext_src', sa.String(), nullable=True))
    op.drop_column('project', 'fms_id')
    op.add_column('readset', sa.Column('state', postgresql.ENUM('VALID', 'ON_HOLD', 'INVALID', name='stateenum', create_type=False), nullable=True))
    op.add_column('readset', sa.Column('ext_id', sa.Integer(), nullable=True))
    op.add_column('readset', sa.Column('ext_src', sa.String(), nullable=True))
    op.drop_column('readset', 'quality_offset')
    op.add_column('run', sa.Column('ext_id', sa.Integer(), nullable=True))
    op.add_column('run', sa.Column('ext_src', sa.String(), nullable=True))
    op.drop_column('run', 'fms_id')
    # Change sequence name Cf. https://petegraham.co.uk/rename-postgres-table-with-alembic/
    op.execute('ALTER SEQUENCE patient_id_seq RENAME TO specimen_id_seq')
    op.add_column('sample', sa.Column('ext_id', sa.Integer(), nullable=True))
    op.add_column('sample', sa.Column('ext_src', sa.String(), nullable=True))
    # Rename column patient_id to specimen_id in sample table
    op.alter_column('sample', 'patient_id', new_column_name='specimen_id')
    op.drop_column('sample', 'fms_id')
    op.drop_column('specimen', 'fms_id')
    public_to_upper = PGFunction(
        schema="public",
        signature="to_upper(some_text text)",
        definition='RETURNS text as\n  $$\n    SELECT upper(some_text)\n  $$ language SQL'
    )
    op.create_entity(public_to_upper)

    op.sync_enum_values('public', 'flagenum', ['PASS', 'WARNING', 'FAILED', 'MISSING', 'NOT_APPLICABLE'],
                        [TableReference(table_schema='public', table_name='metric', column_name='flag')],
                        enum_values_to_rename=[])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.sync_enum_values('public', 'flagenum', ['PASS', 'WARNING', 'FAILED'],
                        [TableReference(table_schema='public', table_name='metric', column_name='flag')],
                        enum_values_to_rename=[])
    public_to_upper = PGFunction(
        schema="public",
        signature="to_upper(some_text text)",
        definition='RETURNS text as\n  $$\n    SELECT upper(some_text)\n  $$ language SQL'
    )
    op.drop_entity(public_to_upper)

    op.add_column('sample', sa.Column('fms_id', sa.VARCHAR(), autoincrement=False, nullable=True))
    # Change sequence name Cf. https://petegraham.co.uk/rename-postgres-table-with-alembic/
    op.execute('ALTER SEQUENCE specimen_id_seq RENAME TO patient_id_seq')
    op.drop_column('sample', 'ext_src')
    op.drop_column('sample', 'ext_id')
    # Rename column patient_id to specimen_id in sample table
    op.alter_column('sample', 'specimen_id', new_column_name='patient_id')
    op.add_column('run', sa.Column('fms_id', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_column('run', 'ext_src')
    op.drop_column('run', 'ext_id')
    op.add_column('readset', sa.Column('quality_offset', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_column('readset', 'ext_src')
    op.drop_column('readset', 'ext_id')
    op.drop_column('readset', 'state')
    op.add_column('project', sa.Column('fms_id', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_column('project', 'ext_src')
    op.drop_column('project', 'ext_id')
    op.drop_column('operation_config', 'ext_src')
    op.drop_column('operation_config', 'ext_id')
    op.drop_column('operation', 'ext_src')
    op.drop_column('operation', 'ext_id')
    op.drop_column('operation', 'reference_id')
    op.drop_column('metric', 'ext_src')
    op.drop_column('metric', 'ext_id')
    op.drop_column('location', 'ext_src')
    op.drop_column('location', 'ext_id')
    op.drop_column('job', 'ext_src')
    op.drop_column('job', 'ext_id')
    op.drop_column('file', 'ext_src')
    op.drop_column('file', 'ext_id')
    op.drop_column('experiment', 'ext_src')
    op.drop_column('experiment', 'ext_id')
    op.rename_table('specimen', 'patient')
    op.drop_table('reference')
    sa.Enum('VALID', 'ON_HOLD', 'INVALID', name='stateenum').drop(op.get_bind())
    # ### end Alembic commands ###
